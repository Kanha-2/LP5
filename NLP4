import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt 

import tensorflow as tf 
from tensorflow import keras 
from keras.models import Sequential
from keras.layers import Dense , LSTM

import yfinance as yf 

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error,mean_squared_error

df=pd.read_csv('Google_Stock_Price.csv')
df.head()



df['Close'] = df['Close'].str.replace(',', '').astype(float)
data = df[['Close']]
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(data)

plt.figure(figsize=(10,8))
plt.plot(df['Close'])
plt.title("ooooooooooooo")
plt.xlabel('date')
plt.ylabel('close price')
plt.show()


def create_dataset(data,time_step=60):
    X,y=[],[]
    for i in range(len(data)-time_step-1):
        X.append(data[i:(i+time_step),0])
        y.append(data[i+time_step,0])
    return np.array(X),np.array(y)

time_step=60

X,y= create_dataset(scaled_data,time_step)
X=np.reshape(X,(X.shape[0],X.shape[1],1))

train_size=int(len(X)*.8)
Xtrain,Xtest=X[:train_size],X[train_size:]
ytrain,ytest=y[:train_size],y[train_size:]


model = Sequential()
model.add(LSTM(units=100, return_sequences=True, input_shape=(Xtrain.shape[1], 1)))
model.add(LSTM(units=100, return_sequences=False))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')

model.summary()



# Train
history = model.fit(Xtrain, ytrain, epochs=100, batch_size=64, validation_data=(Xtest, ytest), verbose=1)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss During Training')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()


predictions = model.predict(Xtest)

predicted_prices = scaler.inverse_transform(predictions)
actual_prices = scaler.inverse_transform(ytest.reshape(-1, 1))

plt.figure(figsize=(12, 6))
plt.plot(actual_prices, label='Actual Prices')
plt.plot(predicted_prices, label='Predicted Prices')
plt.title('Google Stock Price Prediction (Test Set)')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()


#evaluation metrics
mse = mean_squared_error(actual_prices, predicted_prices)
mae = mean_absolute_error(actual_prices, predicted_prices)

print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute Error: {mae}')


model.save('google_stock_price_model.h5')

from tensorflow.keras.models import load_model
loaded_model = load_model('google_stock_price_model.h5')


# Get the last 60 days of data from the original dataset for future prediction
last_60_days = scaled_data[-60:]
last_60_days = np.reshape(last_60_days, (1, last_60_days.shape[0], 1))

# Predict the next day's stock price
predicted_stock_price = model.predict(last_60_days)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)

# Print the predicted price
print(f'The predicted stock price for the next day is: {predicted_stock_price[0][0]}')



import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 

import tensorflow as tf 
from tensorflow import keras 
from keras.models import Sequential
from keras import layers
from keras.layers import Dense , LSTM

from sklearn.model_selection import train_test_split 
from sklearn.metrics import mean_absolute_error



df=pd.read_csv('Google_Stock_Price.csv')
df.head()



df['Close'] = df['Close'].str.replace(',', '').astype(float)
data = df[['Close']]
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(data)

plt.figure(figsize=(10,8))
plt.plot(df['Close'])
plt.title("ooooooooooooo")
plt.xlabel('date')
plt.ylabel('close price')
plt.show()
